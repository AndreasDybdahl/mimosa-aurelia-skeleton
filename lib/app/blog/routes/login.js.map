{"version":3,"sources":["/var/snap-ci/repo/src/app/blog/routes/login.js"],"names":[],"mappings":";;;MAAQ,qBAAqB,EACrB,SAAS,EAEV,IAAI,yCAEE,KAAK;;;;AALV,2BAAqB,iBAArB,qBAAqB;;AACrB,eAAS,kBAAT,SAAS;;AAEV,UAAI;;;;;;;AAEE,WAAK;AAEL,iBAFA,KAAK,CAEJ,WAAW;gCAFZ,KAAK;;AAGd,cAAI,CAAC,WAAW,GAAG,WAAW,CAAC;AAC/B,cAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACtB;;6BALU,KAAK;AACT,gBAAM;mBAAA,kBAAG;AAAE,qBAAO,CAAC,qBAAqB,CAAC,CAAC;aAAE;;;;;AAMnD,qBAAW;mBAAA,uBAAG;AACZ,qBAAO,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK,IAAI,CAAC;aACvC;;;;AAED,kBAAQ;mBAAA,kBAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE;AAC7B,kBAAI,KAAK,CAAC,UAAU,EAAE;AACpB,oBAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;eACpC,MAAM;AACL,oBAAI,CAAC,UAAU,GAAG,GAAG,CAAC;eACvB;aACF;;;;AAED,yBAAe;mBAAA,2BAAG;AAChB,qBAAO,IAAI,CAAC;aACb;;;;AAED,eAAK;mBAAA,iBAAG;;;AACN,kBAAI,IAAI,CAAC,OAAO;AACd,uBAAO;eAAA,AAET,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AACpB,kBAAI,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAC7D,IAAI,CAAC,UAAA,OAAO,EAAI;AACf,sBAAK,OAAO,GAAG,KAAK,CAAC;AACrB,oBAAI,OAAO,EAAE;AACX,wBAAK,MAAM,CAAC,QAAQ,CAAC,MAAK,UAAU,CAAC,CAAC;iBACvC,MAAM,EAEN;eACF,EAAE,UAAA,CAAC,EAAI;AACN,sBAAK,OAAO,GAAG,KAAK,CAAC;AACrB,uBAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;eAC1B,CAAC,CAAC;aACN;;;;;;eAxCU,KAAK","file":"/var/snap-ci/repo/src/app/blog/routes/login.js","sourcesContent":["import {AuthenticationService} from '../services/auth';\nimport {AppRouter} from 'aurelia-router';\n\nimport view from './login.html!';\n\nexport class Login {\n  static inject() { return [AuthenticationService]; }\n  constructor(authService) {\n    this.authService = authService;\n    this.running = false;\n  }\n\n  canActivate() {\n    return this.authService.user === null;\n  }\n\n  activate(params, query, route) {\n    if (query.redirectTo) {\n      this.redirectTo = query.redirectTo;\n    } else {\n      this.redirectTo = '/';\n    }\n  }\n\n  getViewStrategy() {\n    return view;\n  }\n\n  login() {\n    if (this.running)\n      return;\n\n    this.running = true;\n    this.authService.login(this.username.value, this.password.value)\n      .then(success => {\n        this.running = false;\n        if (success) {\n          this.router.navigate(this.redirectTo);\n        } else {\n          // TODO: Display error\n        }\n      }, e => {\n        this.running = false;\n        return Promise.reject(e);\n      });\n  }\n}"]}
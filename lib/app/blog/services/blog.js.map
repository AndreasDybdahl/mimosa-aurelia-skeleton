{"version":3,"sources":["/var/snap-ci/repo/src/app/blog/services/blog.js"],"names":[],"mappings":"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","file":"/var/snap-ci/repo/src/app/blog/services/blog.js","sourcesContent":["import {Metadata} from 'aurelia-framework';\n\nimport moment from 'moment';\n\nconst PAGE_SIZE = 5;\n\nlet posts = [\n   {\n    id: 2,\n    title: 'This is another test post',\n    slug: 'this-is-another-test-post',\n    date: '2015-01-29T22:26:08.549Z',\n    tags: ['test', 'funky'],\n    content: `\nThis post is a lot more funky than the other.\n\nIt has stuff that the other does not.\n\n* See\n* Here\n* Is\n* A\n* List\n\n#### And a heading\n    `\n  },\n  {\n    id: 1,\n    title: 'This is a test post',\n    slug: 'this-is-a-test-post',\n    date: '2015-01-28T22:26:08.549Z',\n    tags: ['test'],\n    content: `\nSo I write a little *markdown*, and it just **works**!\n    `\n  }\n];\n\nfunction unique(arr) {\n  let obj = {};\n  return arr.filter(itm => {\n    if (obj.hasOwnProperty(itm))\n      return false;\n\n    return obj[itm] = true;\n  });\n}\n\nfunction paginate(list, page, pageSize) {\n  let pages = Math.ceil(list.length - 1 / pageSize);\n  if (pages === 0)\n    pages = 1;\n\n  if (page > pages)\n    throw new Error(`There does not exist ${page} pages`);\n\n  let result = list.slice((page - 1) * pageSize, pageSize);\n  return {\n    posts: result,\n    page: page,\n    total: pages\n  };\n}\n\nexport class BlogService {\n  static metadata(){ return Metadata.singleton(); }\n\n  getLatest(page = 1) {\n    return new Promise(resolve => {\n      resolve(paginate(posts, page, PAGE_SIZE));\n    });\n  }\n\n  getTags() {\n    return new Promise(resolve => {\n      let tags = Array.prototype.concat.apply([], posts.map(p => p.tags));\n      tags = unique(tags);\n      resolve(tags);\n    });\n  }\n\n  getPost(year, month, date, slug) {\n    return new Promise(resolve => {\n      let dateMatch = `${year}-${month}-${date}`;\n      let post = posts.filter(p => {\n        let date = moment(p.date).format('YYYY-MM-DD');\n        return date === dateMatch && p.slug === slug;\n      });\n\n      if (post.length === 0)\n        return resolve(null);\n\n      resolve(post[0]);\n    });\n  }\n\n  getPostsForTag(tag, page = 1) {\n    return new Promise(resolve => {\n      let tagPosts = posts.filter(p => p.tags.indexOf(tag) > -1);\n      resolve(paginate(tagPosts, page, PAGE_SIZE));\n    });\n  }\n}"]}
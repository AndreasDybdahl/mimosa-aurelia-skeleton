{"version":3,"sources":["/var/snap-ci/repo/src/html/generate.js"],"names":[],"mappings":"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","file":"/var/snap-ci/repo/src/html/generate.js","sourcesContent":["import * as LogManager from 'aurelia-logging';\nimport {ViewStrategy, ViewResources, CustomElement,\n        AttachedBehavior, TemplateController} from 'aurelia-templating';\nimport {Metadata, ResourceType, Origin} from 'aurelia-metadata';\nimport {relativeToFile} from 'aurelia-path';\n\nvar hasTemplateElement = ('content' in document.createElement('template'));\nvar logger = LogManager.getLogger('systemjs-html-import');\n\nexport default function generate(path, html, deps) {\n  var doc = document.createDocumentFragment();\n  var div = document.createElement('div');\n  div.innerHTML = html;\n  while(div.firstChild) {\n    doc.appendChild(div.firstChild);\n  }\n\n  if(!hasTemplateElement) {\n    HTMLTemplateElement.bootstrap(doc);\n  }\n\n  var template = doc.querySelector('template');\n\n  if(!template) {\n    throw new Error('There was no template element found');\n  }\n\n  return new InlineViewStrategy(path, template, deps);\n};\n\nclass InlineViewStrategy extends ViewStrategy {\n  constructor(path, template, deps) {\n    this.path = path;\n    this.template = template;\n    this.deps = deps;\n  }\n\n  loadViewFactory(viewEngine, options) {\n    var existing = viewEngine.importedViews[this.path];\n    if (existing) {\n      return Promise.resolve(existing);\n    }\n\n    return this.loadResources(viewEngine).then(resources => {\n      var existing = viewEngine.importedViews[this.path];\n      if (existing) {\n        return Promise.resolve(existing);\n      }\n\n      var factory = viewEngine.viewCompiler.compile(this.template, resources, options);\n      viewEngine.importedViews[this.path] = factory;\n      return factory;\n    });\n  }\n\n  loadResources({appResources, resourceCoordinator}) {\n    var i, l;\n    var registry = new ViewResources(appResources, this.path),\n        dxImportElements = this.template.content.querySelectorAll('import');\n\n    if (dxImportElements.length === 0) {\n      return Promise.resolve(registry);\n    }\n\n    var importIds = new Array(dxImportElements.length);\n    var names = new Array(dxImportElements.length);\n\n    for (i = 0, l = dxImportElements.length; i < l; ++i) {\n      var current = dxImportElements[i];\n      var src = current.getAttribute('from');\n\n      if (!src) {\n        throw new Error(`Import element in ${this.path} has no \"from\" attribute.`);\n      }\n\n      importIds[i] = src;\n      names[i] = current.getAttribute('as');\n\n      if (current.parentNode) {\n        current.parentNode.removeChild(current);\n      }\n    }\n\n    importIds = importIds.map(x => relativeToFile(x, this.path));\n    logger.debug(`importing resources for ${this.path}`, importIds);\n\n    return resourceCoordinator.importResourcesFromModuleIds(importIds).then(toRegister => {\n      for (i = 0, l = toRegister.length; i < l; ++i) {\n        toRegister[i].register(registry, names[i]);\n      }\n\n      return registry;\n    });\n  }\n}"]}